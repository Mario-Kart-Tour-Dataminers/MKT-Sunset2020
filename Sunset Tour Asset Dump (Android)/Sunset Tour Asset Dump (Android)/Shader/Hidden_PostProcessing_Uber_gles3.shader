//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Hidden/PostProcessing/Uber" {
Properties {
}
SubShader {
 Pass {
  ZTest Always
  ZWrite Off
  Cull Off
  GpuProgramID 20131
Program "vp" {
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
bool u_xlatb6;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb6 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb6){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
bool u_xlatb6;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb6 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb6){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
bool u_xlatb6;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb6 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb6){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump float u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_0 = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat16_0 = u_xlat16_0 * 2.0 + -1.0;
    u_xlat16_2.x = -abs(u_xlat16_0) + 1.0;
    u_xlat16_0 = u_xlat16_0 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0 * 2.0 + -1.0;
    u_xlat16_2.x = sqrt(u_xlat16_2.x);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0 = u_xlat16_2.x * u_xlat16_0;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_1 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_1);
    u_xlat16_2.xyz = sqrt(u_xlat16_2.xyz);
    SV_Target0.xyz = vec3(u_xlat16_0) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump float u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_0 = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat16_0 = u_xlat16_0 * 2.0 + -1.0;
    u_xlat16_2.x = -abs(u_xlat16_0) + 1.0;
    u_xlat16_0 = u_xlat16_0 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0 * 2.0 + -1.0;
    u_xlat16_2.x = sqrt(u_xlat16_2.x);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0 = u_xlat16_2.x * u_xlat16_0;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_1 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_1);
    u_xlat16_2.xyz = sqrt(u_xlat16_2.xyz);
    SV_Target0.xyz = vec3(u_xlat16_0) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
mediump float u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_0 = texture(_DitheringTex, u_xlat0.xy).w;
    u_xlat16_0 = u_xlat16_0 * 2.0 + -1.0;
    u_xlat16_2.x = -abs(u_xlat16_0) + 1.0;
    u_xlat16_0 = u_xlat16_0 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0 * 2.0 + -1.0;
    u_xlat16_2.x = sqrt(u_xlat16_2.x);
    u_xlat16_2.x = (-u_xlat16_2.x) + 1.0;
    u_xlat16_0 = u_xlat16_2.x * u_xlat16_0;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_1 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(u_xlat16_1);
    u_xlat16_2.xyz = sqrt(u_xlat16_2.xyz);
    SV_Target0.xyz = vec3(u_xlat16_0) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_2.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat4;
float u_xlat6;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat0.x = _Lut2D_Params.y;
    u_xlat0.y = 0.0;
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_1.zxy;
    u_xlat16_6 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat16_6) * u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = sqrt(u_xlat16_1.xyz);
    u_xlat4.xyz = u_xlat16_1.xyz * _Lut2D_Params.zzz;
    u_xlat6 = floor(u_xlat4.x);
    u_xlat2.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat2.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat2.xy;
    u_xlat2.x = u_xlat6 * _Lut2D_Params.y + u_xlat2.y;
    u_xlat6 = u_xlat16_1.x * _Lut2D_Params.z + (-u_xlat6);
    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat2.xz).xyz;
    u_xlat16_0.xyw = texture(_Lut2D, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = (-u_xlat16_1.xyz) + u_xlat16_0.xyw;
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat4;
float u_xlat6;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat0.x = _Lut2D_Params.y;
    u_xlat0.y = 0.0;
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_1.zxy;
    u_xlat16_6 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat16_6) * u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = sqrt(u_xlat16_1.xyz);
    u_xlat4.xyz = u_xlat16_1.xyz * _Lut2D_Params.zzz;
    u_xlat6 = floor(u_xlat4.x);
    u_xlat2.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat2.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat2.xy;
    u_xlat2.x = u_xlat6 * _Lut2D_Params.y + u_xlat2.y;
    u_xlat6 = u_xlat16_1.x * _Lut2D_Params.z + (-u_xlat6);
    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat2.xz).xyz;
    u_xlat16_0.xyw = texture(_Lut2D, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = (-u_xlat16_1.xyz) + u_xlat16_0.xyw;
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec4 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat4;
float u_xlat6;
mediump float u_xlat16_6;
mediump float u_xlat16_9;
void main()
{
    u_xlat0.x = _Lut2D_Params.y;
    u_xlat0.y = 0.0;
    u_xlat16_1.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_1.zxy;
    u_xlat16_6 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_1.xyz = vec3(u_xlat16_6) * u_xlat16_1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = sqrt(u_xlat16_1.xyz);
    u_xlat4.xyz = u_xlat16_1.xyz * _Lut2D_Params.zzz;
    u_xlat6 = floor(u_xlat4.x);
    u_xlat2.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat2.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat2.xy;
    u_xlat2.x = u_xlat6 * _Lut2D_Params.y + u_xlat2.y;
    u_xlat6 = u_xlat16_1.x * _Lut2D_Params.z + (-u_xlat6);
    u_xlat0.xy = u_xlat0.xy + u_xlat2.xz;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat2.xz).xyz;
    u_xlat16_0.xyw = texture(_Lut2D, u_xlat0.xy).xyz;
    u_xlat16_0.xyw = (-u_xlat16_1.xyz) + u_xlat16_0.xyw;
    u_xlat0.xyz = vec3(u_xlat6) * u_xlat16_0.xyw + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_9 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat16_9) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb9 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_9 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat16_9) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb9 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_9 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat16_9) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb9 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
float u_xlat6;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_6 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_6) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_6 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_6 = sqrt(u_xlat16_6);
    u_xlat6 = _Grain_Params1.xxxy.z * (-u_xlat16_6) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_6 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_6 = u_xlat16_6 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat16_6 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_6 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_6) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
float u_xlat6;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_6 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_6) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_6 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_6 = sqrt(u_xlat16_6);
    u_xlat6 = _Grain_Params1.xxxy.z * (-u_xlat16_6) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_6 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_6 = u_xlat16_6 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat16_6 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_6 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_6) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
float u_xlat6;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_6 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_6) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_6 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_6 = sqrt(u_xlat16_6);
    u_xlat6 = _Grain_Params1.xxxy.z * (-u_xlat16_6) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_6 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_6 = u_xlat16_6 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat16_6 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat16_6 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_6 = u_xlat16_6 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_6) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_0.zxy;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_9 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat16_9) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat3.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat1.x = u_xlat3.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat3.x);
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = texture(_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_0.zxy;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_9 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat16_9) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat3.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat1.x = u_xlat3.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat3.x);
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = texture(_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
void main()
{
    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_0.zxy;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_9) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_9 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat16_9) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat3.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat1.x = u_xlat3.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat3.x);
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = texture(_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb9 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb9 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb9 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb9){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_3.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb9 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb9){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat9 = _ScreenParams.x / _ScreenParams.y;
        u_xlat9 = u_xlat9 + -1.0;
        u_xlat9 = _Vignette_Settings.w * u_xlat9 + 1.0;
        u_xlat1.x = u_xlat9 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat9 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat9 = (-u_xlat9) + 1.0;
        u_xlat9 = max(u_xlat9, 0.0);
        u_xlat9 = log2(u_xlat9);
        u_xlat9 = u_xlat9 * _Vignette_Settings.y;
        u_xlat9 = exp2(u_xlat9);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat9) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_9 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_9) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat9) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_9 = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat16_9 = (-u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.zxy;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat3.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat3.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat3.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = texture(_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.zxy;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat3.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat3.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat3.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = texture(_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.zxy;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat3.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat3.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat3.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = texture(_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
float u_xlat9;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
float u_xlat9;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
float u_xlat9;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.xyz;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.zxy;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat3.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat3.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat3.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = texture(_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.zxy;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat3.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat3.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat3.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = texture(_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat9;
mediump float u_xlat16_9;
void main()
{
    u_xlat0 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat1.x = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat0.xyzy * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0.xwzw * u_xlat1.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat1 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.zxy;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat0.xy).xyz;
    u_xlat16_0.xyz = texture(_BloomTex, u_xlat0.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * _Bloom_Settings.yyy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat0.xyz * _Bloom_Color.zxy;
    u_xlat16_2.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy * u_xlat16_2.zxy;
    u_xlat16_9 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1.xyz = u_xlat16_2.xyz * vec3(u_xlat16_9) + u_xlat1.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat9 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = _Grain_Params1.xxxy.z * (-u_xlat9) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat9) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat3.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat3.x = floor(u_xlat3.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat3.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat3.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat3.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat3.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_3.xyz = texture(_Lut2D, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = (-u_xlat16_1.xyz) + u_xlat16_3.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_3.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_9 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_9) + 1.0;
    u_xlat16_9 = u_xlat16_9 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_9 = min(max(u_xlat16_9, 0.0), 1.0);
#else
    u_xlat16_9 = clamp(u_xlat16_9, 0.0, 1.0);
#endif
    u_xlat16_9 = u_xlat16_9 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_9 = u_xlat16_9 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_9) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_6;
vec2 u_xlat8;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_4.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb12 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb12){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat12 = _ScreenParams.x / _ScreenParams.y;
        u_xlat12 = u_xlat12 + -1.0;
        u_xlat12 = _Vignette_Settings.w * u_xlat12 + 1.0;
        u_xlat1.x = u_xlat12 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat12 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat12 = (-u_xlat12) + 1.0;
        u_xlat12 = max(u_xlat12, 0.0);
        u_xlat12 = log2(u_xlat12);
        u_xlat12 = u_xlat12 * _Vignette_Settings.y;
        u_xlat12 = exp2(u_xlat12);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat12) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_12 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_12) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat12 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat12 = sqrt(u_xlat12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat12) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat12) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat6.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat6.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat6.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat5.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat5.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat5.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat16_18) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat16_18) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat16_18) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat16_18) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat16_18) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_18 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat16_18) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_15 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat16_15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_15 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat16_15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_15 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat16_15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_15 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat16_15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_15 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat16_15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
vec2 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_0.xyz = vec3(u_xlat16_15) * u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
    u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
    u_xlat16_15 = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat16_15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_5.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_6.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zxy + u_xlat16_2.zxy;
    u_xlat16_6.xyz = u_xlat16_3.zxy + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_3.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat18) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat15;
mediump float u_xlat16_15;
void main()
{
    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0 = u_xlat0 * u_xlat1.xxxx;
    u_xlat0 = u_xlat0 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat0 = u_xlat0 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat0 * vec4(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat0.zw, 0.0).xyz;
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_2.zxy;
    u_xlat3.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat3.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_4.zxy + u_xlat16_0.xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_4.zxy;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat16_0.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_0.xyz;
    u_xlat16_1.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_1.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat15 = _Bloom_Settings.x * 0.5;
    u_xlat2 = u_xlat1.xyzy * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat2 = min(max(u_xlat2, 0.0), 1.0);
#else
    u_xlat2 = clamp(u_xlat2, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1.xwzw * vec4(u_xlat15) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat2 = u_xlat2 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat2.xy).xyz;
    u_xlat16_2.xyz = texture(_BloomTex, u_xlat2.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.zxy + u_xlat16_3.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.zxy;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat16_15 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_15) + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat2.x = _Lut2D_Params.y;
    u_xlat2.y = 0.0;
    u_xlat5.xy = u_xlat1.xz + u_xlat2.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat16_5.xyz = texture(_Lut2D, u_xlat5.xy).xyz;
    u_xlat16_5.xyz = (-u_xlat16_1.xyz) + u_xlat16_5.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
    u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = sqrt(u_xlat16_1.x);
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb18 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb18){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat6) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_8;
vec2 u_xlat12;
float u_xlat18;
mediump float u_xlat16_18;
bool u_xlatb18;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat6.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat6.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_6.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat4.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_5.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.zw, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_5.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_6.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_1.xyz / u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_8.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + vs_TEXCOORD0.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_8.xyz + u_xlat16_3.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = vs_TEXCOORD0.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_6.xyz * u_xlat16_0.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb18 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb18){
        u_xlat1.xy = vs_TEXCOORD0.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat18 = _ScreenParams.x / _ScreenParams.y;
        u_xlat18 = u_xlat18 + -1.0;
        u_xlat18 = _Vignette_Settings.w * u_xlat18 + 1.0;
        u_xlat1.x = u_xlat18 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat18 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat18 = (-u_xlat18) + 1.0;
        u_xlat18 = max(u_xlat18, 0.0);
        u_xlat18 = log2(u_xlat18);
        u_xlat18 = u_xlat18 * _Vignette_Settings.y;
        u_xlat18 = exp2(u_xlat18);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_18 = texture(_Vignette_Mask, vs_TEXCOORD0.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_18) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat18 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat18 = sqrt(u_xlat18);
    u_xlat18 = _Grain_Params1.xxxy.z * (-u_xlat18) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat6.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat6.x = floor(u_xlat6.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat6.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat6.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat12.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat12.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat6.x);
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_18 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_18 = u_xlat16_18 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_18 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_18 = -abs(u_xlat16_18) + 1.0;
    u_xlat16_18 = sqrt(u_xlat16_18);
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat16_18 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_18) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
float u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1 = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1 = sqrt(u_xlat1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = vec2(u_xlat1) * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1 = u_xlat1 * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1), 1.0);
        u_xlat6 = max(abs(u_xlat1), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1));
#else
        u_xlatb14 = 1.0<abs(u_xlat1);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1 = min(u_xlat1, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1<(-u_xlat1));
#else
        u_xlatb1 = u_xlat1<(-u_xlat1);
#endif
        u_xlat1 = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1 = u_xlat13 * u_xlat1 + -1.0;
        u_xlat5.xy = u_xlat0.xy * vec2(u_xlat1) + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
float u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1 = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1 = sqrt(u_xlat1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = vec2(u_xlat1) * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1 = u_xlat1 * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1), 1.0);
        u_xlat6 = max(abs(u_xlat1), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1));
#else
        u_xlatb14 = 1.0<abs(u_xlat1);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1 = min(u_xlat1, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1<(-u_xlat1));
#else
        u_xlatb1 = u_xlat1<(-u_xlat1);
#endif
        u_xlat1 = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1 = u_xlat13 * u_xlat1 + -1.0;
        u_xlat5.xy = u_xlat0.xy * vec2(u_xlat1) + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
float u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1 = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1 = sqrt(u_xlat1);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = vec2(u_xlat1) * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1 = u_xlat1 * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1), 1.0);
        u_xlat6 = max(abs(u_xlat1), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1));
#else
        u_xlatb14 = 1.0<abs(u_xlat1);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1 = min(u_xlat1, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1<(-u_xlat1));
#else
        u_xlatb1 = u_xlat1<(-u_xlat1);
#endif
        u_xlat1 = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1 = u_xlat13 * u_xlat1 + -1.0;
        u_xlat5.xy = u_xlat0.xy * vec2(u_xlat1) + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat4.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
bool u_xlatb12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb12 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb12){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
float u_xlat3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3 = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bool u_xlatb5;
float u_xlat6;
vec2 u_xlat8;
float u_xlat9;
float u_xlat10;
float u_xlat12;
mediump float u_xlat16_12;
float u_xlat13;
bool u_xlatb14;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy + vec2(-0.5, -0.5);
    u_xlat8.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb5 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb5){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat5.x);
        u_xlat3.x = cos(u_xlat5.x);
        u_xlat5.x = u_xlat2 / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat9 + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat5.xx + u_xlat8.xy;
    } else {
        u_xlat13 = float(1.0) / u_xlat1.x;
        u_xlat13 = u_xlat13 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat2 = min(abs(u_xlat1.x), 1.0);
        u_xlat6 = max(abs(u_xlat1.x), 1.0);
        u_xlat6 = float(1.0) / u_xlat6;
        u_xlat2 = u_xlat6 * u_xlat2;
        u_xlat6 = u_xlat2 * u_xlat2;
        u_xlat10 = u_xlat6 * 0.0208350997 + -0.0851330012;
        u_xlat10 = u_xlat6 * u_xlat10 + 0.180141002;
        u_xlat10 = u_xlat6 * u_xlat10 + -0.330299497;
        u_xlat6 = u_xlat6 * u_xlat10 + 0.999866009;
        u_xlat10 = u_xlat6 * u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb14 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb14 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat10 = u_xlat10 * -2.0 + 1.57079637;
        u_xlat10 = u_xlatb14 ? u_xlat10 : float(0.0);
        u_xlat2 = u_xlat2 * u_xlat6 + u_xlat10;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat2) : u_xlat2;
        u_xlat1.x = u_xlat13 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat0.xy * u_xlat1.xx + u_xlat8.xy;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat16_4.xyz = texture(_MainTex, u_xlat5.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_4.zxy;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_4.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_12 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat12 = _Grain_Params1.xxxy.z * (-u_xlat16_12) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat12) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat4.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat4.x = floor(u_xlat4.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat4.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat4.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat8.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat8.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat4.x);
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_12 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_12 = u_xlat16_12 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_12 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_12 = -abs(u_xlat16_12) + 1.0;
    u_xlat16_12 = sqrt(u_xlat16_12);
    u_xlat16_12 = (-u_xlat16_12) + 1.0;
    u_xlat16_12 = u_xlat16_12 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_12) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
float u_xlat3;
float u_xlat4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3 = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3 / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3 = float(1.0) / u_xlat2.x;
        u_xlat3 = u_xlat3 * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3 * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3 = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3 = u_xlat7 * u_xlat3 + 0.180141002;
        u_xlat3 = u_xlat7 * u_xlat3 + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3 + 0.999866009;
        u_xlat3 = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3 = u_xlat3 * -2.0 + 1.57079637;
        u_xlat3 = u_xlatb8 ? u_xlat3 : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec2 u_xlat3;
float u_xlat4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz + (-u_xlat16_0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
float u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4 = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.zxy * u_xlat16_5.zxy;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.zxy + u_xlat16_4.zxy;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.zxy;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_2.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat2.xyz = u_xlat16_2.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat1.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat2.xyz * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat1.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat15) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat1.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0 = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * vec3(u_xlat16_0) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.zxy * u_xlat1.zxy;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat1.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat1.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb15 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb15){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
float u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5 = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5 = u_xlat5 * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * vec2(u_xlat5) + u_xlat1.zw;
    } else {
        u_xlat5 = float(1.0) / u_xlat0.x;
        u_xlat5 = u_xlat5 * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5 * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
highp vec4 phase0_Input0_1;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
bool u_xlatb4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
float u_xlat7;
bool u_xlatb7;
float u_xlat8;
bool u_xlatb8;
vec2 u_xlat10;
vec2 u_xlat12;
float u_xlat13;
float u_xlat15;
mediump float u_xlat16_15;
bool u_xlatb15;
float u_xlat17;
float u_xlat18;
void main()
{
    phase0_Input0_1 = vec4(vs_TEXCOORD0, vs_TEXCOORD1);
    u_xlat0 = phase0_Input0_1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat1 = u_xlat0 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat0 = u_xlat0 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat0 = u_xlat0 * _Distortion_CenterScale.zwzw;
    u_xlat2.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb7 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb7){
        u_xlat12.xy = u_xlat2.xx * _Distortion_Amount.xy;
        u_xlat3.x = sin(u_xlat12.x);
        u_xlat4.x = cos(u_xlat12.x);
        u_xlat12.x = u_xlat3.x / u_xlat4.x;
        u_xlat17 = float(1.0) / u_xlat12.y;
        u_xlat12.x = u_xlat12.x * u_xlat17 + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat12.xx + u_xlat1.xy;
    } else {
        u_xlat3.x = float(1.0) / u_xlat2.x;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.y;
        u_xlat8 = min(abs(u_xlat2.x), 1.0);
        u_xlat13 = max(abs(u_xlat2.x), 1.0);
        u_xlat13 = float(1.0) / u_xlat13;
        u_xlat8 = u_xlat13 * u_xlat8;
        u_xlat13 = u_xlat8 * u_xlat8;
        u_xlat18 = u_xlat13 * 0.0208350997 + -0.0851330012;
        u_xlat18 = u_xlat13 * u_xlat18 + 0.180141002;
        u_xlat18 = u_xlat13 * u_xlat18 + -0.330299497;
        u_xlat13 = u_xlat13 * u_xlat18 + 0.999866009;
        u_xlat18 = u_xlat13 * u_xlat8;
#ifdef UNITY_ADRENO_ES3
        u_xlatb4 = !!(1.0<abs(u_xlat2.x));
#else
        u_xlatb4 = 1.0<abs(u_xlat2.x);
#endif
        u_xlat18 = u_xlat18 * -2.0 + 1.57079637;
        u_xlat18 = u_xlatb4 ? u_xlat18 : float(0.0);
        u_xlat8 = u_xlat8 * u_xlat13 + u_xlat18;
        u_xlat2.x = min(u_xlat2.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb2 = !!(u_xlat2.x<(-u_xlat2.x));
#else
        u_xlatb2 = u_xlat2.x<(-u_xlat2.x);
#endif
        u_xlat2.x = (u_xlatb2) ? (-u_xlat8) : u_xlat8;
        u_xlat2.x = u_xlat3.x * u_xlat2.x + -1.0;
        u_xlat12.xy = u_xlat0.xy * u_xlat2.xx + u_xlat1.xy;
    //ENDIF
    }
    u_xlat0.x = dot(u_xlat0.zw, u_xlat0.zw);
    u_xlat0.x = sqrt(u_xlat0.x);
    if(u_xlatb7){
        u_xlat1.xy = u_xlat0.xx * _Distortion_Amount.xy;
        u_xlat2.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat5.x = u_xlat1.x / u_xlat2.x;
        u_xlat1.x = float(1.0) / u_xlat1.y;
        u_xlat5.x = u_xlat5.x * u_xlat1.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat5.xx + u_xlat1.zw;
    } else {
        u_xlat5.x = float(1.0) / u_xlat0.x;
        u_xlat5.x = u_xlat5.x * _Distortion_Amount.x;
        u_xlat0.x = u_xlat0.x * _Distortion_Amount.y;
        u_xlat2.x = min(abs(u_xlat0.x), 1.0);
        u_xlat7 = max(abs(u_xlat0.x), 1.0);
        u_xlat7 = float(1.0) / u_xlat7;
        u_xlat2.x = u_xlat7 * u_xlat2.x;
        u_xlat7 = u_xlat2.x * u_xlat2.x;
        u_xlat3.x = u_xlat7 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat7 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat7 * u_xlat3.x + -0.330299497;
        u_xlat7 = u_xlat7 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat7 * u_xlat2.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb8 = !!(1.0<abs(u_xlat0.x));
#else
        u_xlatb8 = 1.0<abs(u_xlat0.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb8 ? u_xlat3.x : float(0.0);
        u_xlat2.x = u_xlat2.x * u_xlat7 + u_xlat3.x;
        u_xlat0.x = min(u_xlat0.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb0 = !!(u_xlat0.x<(-u_xlat0.x));
#else
        u_xlatb0 = u_xlat0.x<(-u_xlat0.x);
#endif
        u_xlat0.x = (u_xlatb0) ? (-u_xlat2.x) : u_xlat2.x;
        u_xlat0.x = u_xlat5.x * u_xlat0.x + -1.0;
        u_xlat1.xy = u_xlat0.zw * u_xlat0.xx + u_xlat1.zw;
    //ENDIF
    }
    u_xlat16_0.x = texture(_AutoExposureTex, phase0_Input0_1.xy).x;
    u_xlat16_5.xyz = texture(_MainTex, u_xlat1.xy).xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat1 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat2.x = _Bloom_Settings.x * 0.5;
    u_xlat3 = u_xlat1.xyzy * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat1 = u_xlat1.xwzw * u_xlat2.xxxx + u_xlat12.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat1 = u_xlat1 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat1.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_1.xyz = texture(_BloomTex, u_xlat1.zw).xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.yyy;
    u_xlat2.xy = u_xlat12.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat2.xy).xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat1.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat1.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb15 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb15){
        u_xlat1.xy = u_xlat12.xy + (-_Vignette_Center.xy);
        u_xlat1.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat15 = _ScreenParams.x / _ScreenParams.y;
        u_xlat15 = u_xlat15 + -1.0;
        u_xlat15 = _Vignette_Settings.w * u_xlat15 + 1.0;
        u_xlat1.x = u_xlat15 * u_xlat1.z;
        u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
        u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat1.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat15 = (-u_xlat15) + 1.0;
        u_xlat15 = max(u_xlat15, 0.0);
        u_xlat15 = log2(u_xlat15);
        u_xlat15 = u_xlat15 * _Vignette_Settings.y;
        u_xlat15 = exp2(u_xlat15);
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz;
    } else {
        u_xlat16_15 = texture(_Vignette_Mask, u_xlat12.xy).w;
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat16_15) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz + (-u_xlat0.xyz);
        u_xlat1.xyz = vec3(_Vignette_Opacity) * u_xlat2.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = phase0_Input0_1.zw * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat2.xyz = u_xlat1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat15 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat15 = sqrt(u_xlat15);
    u_xlat15 = _Grain_Params1.xxxy.z * (-u_xlat15) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat1.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + u_xlat1.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat5.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat5.x = floor(u_xlat5.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat5.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat5.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat10.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat10.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat5.x);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = phase0_Input0_1.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_15 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_15 = u_xlat16_15 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_15 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_15 = -abs(u_xlat16_15) + 1.0;
    u_xlat16_15 = sqrt(u_xlat16_15);
    u_xlat16_15 = (-u_xlat16_15) + 1.0;
    u_xlat16_15 = u_xlat16_15 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_15) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat16_1.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_1.xyz = min(max(u_xlat16_1.xyz, 0.0), 1.0);
#else
        u_xlat16_1.xyz = clamp(u_xlat16_1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat16_1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat16_0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat16_0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xyz = min(max(u_xlat16_0.xyz, 0.0), 1.0);
#else
    u_xlat16_0.xyz = clamp(u_xlat16_0.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = sqrt(u_xlat16_0.xyz);
    u_xlat8.xyz = u_xlat16_0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat16_0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
float u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8 = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = vec4(u_xlat8) * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.xyz * u_xlat16_6.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat16_8.xyz = u_xlat16_3.xyz + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
float u_xlat13;
float u_xlat14;
bool u_xlatb15;
vec2 u_xlat16;
vec2 u_xlat20;
float u_xlat21;
float u_xlat22;
bool u_xlatb22;
float u_xlat24;
mediump float u_xlat16_24;
float u_xlat26;
bool u_xlatb26;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb30;
void main()
{
    u_xlat16_0.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat1 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat8.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat8.xxxx * u_xlat1;
    u_xlat1 = u_xlat1 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_8.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_2.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_3.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    u_xlat4.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat20.xy = u_xlat4.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat4.xy = u_xlat4.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat4.xy = u_xlat4.xy * _Distortion_CenterScale.zw;
    u_xlat26 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat26 = sqrt(u_xlat26);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb27 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb27){
        u_xlat5.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat6.x = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat5.x = u_xlat5.x / u_xlat6.x;
        u_xlat13 = float(1.0) / u_xlat5.y;
        u_xlat5.x = u_xlat5.x * u_xlat13 + -1.0;
        u_xlat5.xy = u_xlat4.xy * u_xlat5.xx + u_xlat20.xy;
    } else {
        u_xlat21 = float(1.0) / u_xlat26;
        u_xlat21 = u_xlat21 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat26), 1.0);
        u_xlat6.x = max(abs(u_xlat26), 1.0);
        u_xlat6.x = float(1.0) / u_xlat6.x;
        u_xlat29 = u_xlat29 * u_xlat6.x;
        u_xlat6.x = u_xlat29 * u_xlat29;
        u_xlat14 = u_xlat6.x * 0.0208350997 + -0.0851330012;
        u_xlat14 = u_xlat6.x * u_xlat14 + 0.180141002;
        u_xlat14 = u_xlat6.x * u_xlat14 + -0.330299497;
        u_xlat6.x = u_xlat6.x * u_xlat14 + 0.999866009;
        u_xlat14 = u_xlat29 * u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb22 = 1.0<abs(u_xlat26);
#endif
        u_xlat14 = u_xlat14 * -2.0 + 1.57079637;
        u_xlat14 = u_xlatb22 ? u_xlat14 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat6.x + u_xlat14;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat29) : u_xlat29;
        u_xlat26 = u_xlat21 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat4.xy * vec2(u_xlat26) + u_xlat20.xy;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat4.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = textureLod(_MainTex, u_xlat4.xy, 0.0).xyz;
    u_xlat1 = u_xlat1 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat1 = u_xlat1 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat5 = u_xlat1 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat1 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat1 = u_xlat1 * _Distortion_CenterScale.zwzw;
    u_xlat26 = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat26 = sqrt(u_xlat26);
    if(u_xlatb27){
        u_xlat6.xy = vec2(u_xlat26) * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7;
        u_xlat6.x = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat6.x + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat28) + u_xlat5.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat26;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat26 = u_xlat26 * _Distortion_Amount.y;
        u_xlat22 = min(abs(u_xlat26), 1.0);
        u_xlat30 = max(abs(u_xlat26), 1.0);
        u_xlat30 = float(1.0) / u_xlat30;
        u_xlat22 = u_xlat30 * u_xlat22;
        u_xlat30 = u_xlat22 * u_xlat22;
        u_xlat7 = u_xlat30 * 0.0208350997 + -0.0851330012;
        u_xlat7 = u_xlat30 * u_xlat7 + 0.180141002;
        u_xlat7 = u_xlat30 * u_xlat7 + -0.330299497;
        u_xlat30 = u_xlat30 * u_xlat7 + 0.999866009;
        u_xlat7 = u_xlat30 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb15 = !!(1.0<abs(u_xlat26));
#else
        u_xlatb15 = 1.0<abs(u_xlat26);
#endif
        u_xlat7 = u_xlat7 * -2.0 + 1.57079637;
        u_xlat7 = u_xlatb15 ? u_xlat7 : float(0.0);
        u_xlat22 = u_xlat22 * u_xlat30 + u_xlat7;
        u_xlat26 = min(u_xlat26, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb26 = !!(u_xlat26<(-u_xlat26));
#else
        u_xlatb26 = u_xlat26<(-u_xlat26);
#endif
        u_xlat26 = (u_xlatb26) ? (-u_xlat22) : u_xlat22;
        u_xlat26 = u_xlat28 * u_xlat26 + -1.0;
        u_xlat6.xy = u_xlat1.xy * vec2(u_xlat26) + u_xlat5.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_6.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat1.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1.x = sqrt(u_xlat1.x);
    if(u_xlatb27){
        u_xlat5.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7 = cos(u_xlat5.x);
        u_xlat5.x = sin(u_xlat5.x);
        u_xlat9 = u_xlat5.x / u_xlat7;
        u_xlat26 = float(1.0) / u_xlat5.y;
        u_xlat9 = u_xlat9 * u_xlat26 + -1.0;
        u_xlat5.xy = u_xlat1.zw * vec2(u_xlat9) + u_xlat5.zw;
    } else {
        u_xlat9 = float(1.0) / u_xlat1.x;
        u_xlat9 = u_xlat9 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat26 = min(abs(u_xlat1.x), 1.0);
        u_xlat27 = max(abs(u_xlat1.x), 1.0);
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat26 = u_xlat26 * u_xlat27;
        u_xlat27 = u_xlat26 * u_xlat26;
        u_xlat28 = u_xlat27 * 0.0208350997 + -0.0851330012;
        u_xlat28 = u_xlat27 * u_xlat28 + 0.180141002;
        u_xlat28 = u_xlat27 * u_xlat28 + -0.330299497;
        u_xlat27 = u_xlat27 * u_xlat28 + 0.999866009;
        u_xlat28 = u_xlat26 * u_xlat27;
#ifdef UNITY_ADRENO_ES3
        u_xlatb30 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb30 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat28 = u_xlat28 * -2.0 + 1.57079637;
        u_xlat28 = u_xlatb30 ? u_xlat28 : float(0.0);
        u_xlat26 = u_xlat26 * u_xlat27 + u_xlat28;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat26) : u_xlat26;
        u_xlat1.x = u_xlat9 * u_xlat1.x + -1.0;
        u_xlat5.xy = u_xlat1.zw * u_xlat1.xx + u_xlat5.zw;
    //ENDIF
    }
    u_xlat5.xy = u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.xy = min(max(u_xlat5.xy, 0.0), 1.0);
#else
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat5.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_1.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_5.xyz = u_xlat16_2.zxy * u_xlat16_6.zxy;
    u_xlat16_4.xyz = u_xlat16_4.zxy * u_xlat16_8.zxy + u_xlat16_5.xyz;
    u_xlat16_1.xyz = u_xlat16_1.zxy * u_xlat16_3.zxy + u_xlat16_4.xyz;
    u_xlat16_8.xyz = u_xlat16_8.zxy + u_xlat16_2.zxy;
    u_xlat16_8.xyz = u_xlat16_3.zxy + u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_1.xyz / u_xlat16_8.xyz;
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xxx * u_xlat16_8.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat16_2.xyz = u_xlat16_0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_24 = dot(u_xlat16_2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat16_24) + 1.0;
    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat16_1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat16_0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat16_2) * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10 = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10), 1.0);
        u_xlat26 = max(abs(u_xlat10), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10));
#else
        u_xlatb11 = 1.0<abs(u_xlat10);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10 = min(u_xlat10, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10<(-u_xlat10));
#else
        u_xlatb10 = u_xlat10<(-u_xlat10);
#endif
        u_xlat10 = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = vec4(u_xlat10) * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat16_0.xyz = u_xlat16_2.xxx * u_xlat16_0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat16_0.xyz * u_xlat1.xyz + (-u_xlat16_0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat16_0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
float u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2 = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2 / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2 = float(1.0) / u_xlat1.x;
        u_xlat2 = u_xlat2 * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2 = u_xlat2 * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * vec2(u_xlat2) + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.xyz * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.zxy * u_xlat16_7.zxy;
    u_xlat16_0.xyz = u_xlat16_0.zxy * u_xlat16_10.zxy + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.zxy * u_xlat16_5.zxy + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat16_10.xyz = u_xlat16_5.zxy + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.zxy + u_xlat16_4.zxy;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.zxy;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.zxy;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_1.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat1.xyz = u_xlat16_1.zxy * _Bloom_Settings.zzz;
    u_xlat3.xyz = u_xlat10.xyz * _Bloom_Color.zxy;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat3.xyz;
    u_xlat0.xyz = u_xlat1.xyz * u_xlat10.xyz + u_xlat0.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_1.xyz = texture(_GrainTex, u_xlat1.xy).xyz;
    u_xlat2.xyz = u_xlat0.yzx;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat2.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat1.xyz = u_xlat0.xyz * u_xlat16_1.zxy;
    u_xlat1.xyz = u_xlat1.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat24) + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
bool u_xlatb0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb0 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb0){
        u_xlat0.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
        u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat0.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat2.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.zxy * u_xlat2.zxy;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.zxy + u_xlat0.zxy;
    //ENDIF
    }
    u_xlat2.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xyz = min(max(u_xlat2.xyz, 0.0), 1.0);
#else
    u_xlat2.xyz = clamp(u_xlat2.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat2.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
        u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
        u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = sqrt(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform 	float _LumaInAlpha;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(0.5<_LumaInAlpha);
#else
    u_xlatb24 = 0.5<_LumaInAlpha;
#endif
    if(u_xlatb24){
        u_xlat1.xyz = u_xlat0.xyz * u_xlat0.xyz;
        u_xlat1.xyz = min(u_xlat1.xyz, vec3(1.0, 1.0, 1.0));
        SV_Target0.w = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    } else {
        SV_Target0.w = 1.0;
    //ENDIF
    }
    SV_Target0.xyz = abs(u_xlat0.xyz);
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2 = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * vec3(u_xlat16_2) + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.xyz;
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1 = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1 = min(max(u_xlat16_1, 0.0), 1.0);
#else
    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);
#endif
    u_xlat16_1 = u_xlat16_1 * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + u_xlat0.xyz;
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
"#ifdef VERTEX
#version 300 es

uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _UVTransform;
in highp vec3 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD1;
vec2 u_xlat0;
void main()
{
    gl_Position.xy = in_POSITION0.xy;
    gl_Position.zw = vec2(0.0, 1.0);
    u_xlat0.xy = in_POSITION0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * _UVTransform.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + _UVTransform.zw;
    vs_TEXCOORD1.xy = u_xlat0.xy * vec2(_RenderViewportScaleFactor);
    vs_TEXCOORD0.xy = u_xlat0.xy;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_EXT_shader_texture_lod
#extension GL_EXT_shader_texture_lod : enable
#endif

precision highp float;
precision highp int;
uniform 	vec4 _ScreenParams;
uniform 	float _RenderViewportScaleFactor;
uniform 	vec4 _Distortion_Amount;
uniform 	vec4 _Distortion_CenterScale;
uniform 	vec4 _Dithering_Coords;
uniform 	vec4 _BloomTex_TexelSize;
uniform 	vec4 _Bloom_DirtTileOffset;
uniform 	vec3 _Bloom_Settings;
uniform 	vec3 _Bloom_Color;
uniform 	float _ChromaticAberration_Amount;
uniform 	vec3 _Lut2D_Params;
uniform 	vec3 _Vignette_Color;
uniform 	vec2 _Vignette_Center;
uniform 	vec4 _Vignette_Settings;
uniform 	float _Vignette_Opacity;
uniform 	float _Vignette_Mode;
uniform 	vec2 _Grain_Params1;
uniform 	vec4 _Grain_Params2;
uniform mediump sampler2D _AutoExposureTex;
uniform mediump sampler2D _ChromaticAberration_SpectralLut;
uniform mediump sampler2D _MainTex;
uniform mediump sampler2D _BloomTex;
uniform mediump sampler2D _Bloom_DirtTex;
uniform mediump sampler2D _Vignette_Mask;
uniform mediump sampler2D _GrainTex;
uniform mediump sampler2D _Lut2D;
uniform mediump sampler2D _DitheringTex;
in highp vec2 vs_TEXCOORD0;
in highp vec2 vs_TEXCOORD1;
layout(location = 0) out highp vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec4 u_xlat6;
mediump vec3 u_xlat16_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_7;
bool u_xlatb7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
float u_xlat11;
bool u_xlatb11;
vec2 u_xlat16;
vec2 u_xlat17;
float u_xlat18;
float u_xlat22;
float u_xlat23;
float u_xlat24;
mediump float u_xlat16_24;
bool u_xlatb24;
float u_xlat25;
float u_xlat26;
float u_xlat28;
float u_xlat29;
float u_xlat30;
bool u_xlatb31;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy + vec2(-0.5, -0.5);
    u_xlat16.xy = u_xlat0.xy * _Distortion_Amount.zz + vec2(0.5, 0.5);
    u_xlat0.xy = u_xlat0.xy * _Distortion_Amount.zz + (-_Distortion_CenterScale.xy);
    u_xlat0.xy = u_xlat0.xy * _Distortion_CenterScale.zw;
    u_xlat1.x = dot(u_xlat0.xy, u_xlat0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(0.0<_Distortion_Amount.w);
#else
    u_xlatb9 = 0.0<_Distortion_Amount.w;
#endif
    if(u_xlatb9){
        u_xlat17.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat2.x = sin(u_xlat17.x);
        u_xlat3.x = cos(u_xlat17.x);
        u_xlat17.x = u_xlat2.x / u_xlat3.x;
        u_xlat25 = float(1.0) / u_xlat17.y;
        u_xlat17.x = u_xlat17.x * u_xlat25 + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat17.xx + u_xlat16.xy;
    } else {
        u_xlat2.x = float(1.0) / u_xlat1.x;
        u_xlat2.x = u_xlat2.x * _Distortion_Amount.x;
        u_xlat10.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat18 = min(abs(u_xlat10.x), 1.0);
        u_xlat26 = max(abs(u_xlat10.x), 1.0);
        u_xlat26 = float(1.0) / u_xlat26;
        u_xlat18 = u_xlat26 * u_xlat18;
        u_xlat26 = u_xlat18 * u_xlat18;
        u_xlat3.x = u_xlat26 * 0.0208350997 + -0.0851330012;
        u_xlat3.x = u_xlat26 * u_xlat3.x + 0.180141002;
        u_xlat3.x = u_xlat26 * u_xlat3.x + -0.330299497;
        u_xlat26 = u_xlat26 * u_xlat3.x + 0.999866009;
        u_xlat3.x = u_xlat26 * u_xlat18;
#ifdef UNITY_ADRENO_ES3
        u_xlatb11 = !!(1.0<abs(u_xlat10.x));
#else
        u_xlatb11 = 1.0<abs(u_xlat10.x);
#endif
        u_xlat3.x = u_xlat3.x * -2.0 + 1.57079637;
        u_xlat3.x = u_xlatb11 ? u_xlat3.x : float(0.0);
        u_xlat18 = u_xlat18 * u_xlat26 + u_xlat3.x;
        u_xlat10.x = min(u_xlat10.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(u_xlat10.x<(-u_xlat10.x));
#else
        u_xlatb10 = u_xlat10.x<(-u_xlat10.x);
#endif
        u_xlat10.x = (u_xlatb10) ? (-u_xlat18) : u_xlat18;
        u_xlat2.x = u_xlat2.x * u_xlat10.x + -1.0;
        u_xlat17.xy = u_xlat0.xy * u_xlat2.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat16_2.x = texture(_AutoExposureTex, vs_TEXCOORD0.xy).x;
    u_xlat3 = vs_TEXCOORD0.xyxy * vec4(2.0, 2.0, 2.0, 2.0) + vec4(-1.0, -1.0, -1.0, -1.0);
    u_xlat10.x = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat3 = u_xlat10.xxxx * u_xlat3;
    u_xlat3 = u_xlat3 * vec4(vec4(_ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount, _ChromaticAberration_Amount));
    u_xlat16_10.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.166666672, 0.0), 0.0).xyz;
    u_xlat16_4.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.5, 0.0), 0.0).xyz;
    u_xlat16_5.xyz = textureLod(_ChromaticAberration_SpectralLut, vec2(0.833333313, 0.0), 0.0).xyz;
    if(u_xlatb9){
        u_xlat6.xy = u_xlat1.xx * _Distortion_Amount.xy;
        u_xlat7.x = cos(u_xlat6.x);
        u_xlat6.x = sin(u_xlat6.x);
        u_xlat28 = u_xlat6.x / u_xlat7.x;
        u_xlat29 = float(1.0) / u_xlat6.y;
        u_xlat28 = u_xlat28 * u_xlat29 + -1.0;
        u_xlat6.xy = u_xlat0.xy * vec2(u_xlat28) + u_xlat16.xy;
    } else {
        u_xlat28 = float(1.0) / u_xlat1.x;
        u_xlat28 = u_xlat28 * _Distortion_Amount.x;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.y;
        u_xlat29 = min(abs(u_xlat1.x), 1.0);
        u_xlat22 = max(abs(u_xlat1.x), 1.0);
        u_xlat22 = float(1.0) / u_xlat22;
        u_xlat29 = u_xlat29 * u_xlat22;
        u_xlat22 = u_xlat29 * u_xlat29;
        u_xlat30 = u_xlat22 * 0.0208350997 + -0.0851330012;
        u_xlat30 = u_xlat22 * u_xlat30 + 0.180141002;
        u_xlat30 = u_xlat22 * u_xlat30 + -0.330299497;
        u_xlat22 = u_xlat22 * u_xlat30 + 0.999866009;
        u_xlat30 = u_xlat29 * u_xlat22;
#ifdef UNITY_ADRENO_ES3
        u_xlatb7 = !!(1.0<abs(u_xlat1.x));
#else
        u_xlatb7 = 1.0<abs(u_xlat1.x);
#endif
        u_xlat30 = u_xlat30 * -2.0 + 1.57079637;
        u_xlat30 = u_xlatb7 ? u_xlat30 : float(0.0);
        u_xlat29 = u_xlat29 * u_xlat22 + u_xlat30;
        u_xlat1.x = min(u_xlat1.x, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb1 = !!(u_xlat1.x<(-u_xlat1.x));
#else
        u_xlatb1 = u_xlat1.x<(-u_xlat1.x);
#endif
        u_xlat1.x = (u_xlatb1) ? (-u_xlat29) : u_xlat29;
        u_xlat1.x = u_xlat28 * u_xlat1.x + -1.0;
        u_xlat6.xy = u_xlat0.xy * u_xlat1.xx + u_xlat16.xy;
    //ENDIF
    }
    u_xlat6.xy = u_xlat6.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat0.xy = u_xlat6.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_0.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3 = u_xlat3 * vec4(-0.333333343, -0.333333343, -0.666666687, -0.666666687) + vs_TEXCOORD0.xyxy;
    u_xlat3 = u_xlat3 + vec4(-0.5, -0.5, -0.5, -0.5);
    u_xlat6 = u_xlat3 * _Distortion_Amount.zzzz + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat3 = u_xlat3 * _Distortion_Amount.zzzz + (-_Distortion_CenterScale.xyxy);
    u_xlat3 = u_xlat3 * _Distortion_CenterScale.zwzw;
    u_xlat24 = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat7.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat1.x = sin(u_xlat7.x);
        u_xlat7.x = cos(u_xlat7.x);
        u_xlat1.x = u_xlat1.x / u_xlat7.x;
        u_xlat28 = float(1.0) / u_xlat7.y;
        u_xlat1.x = u_xlat1.x * u_xlat28 + -1.0;
        u_xlat7.xy = u_xlat3.xy * u_xlat1.xx + u_xlat6.xy;
    } else {
        u_xlat1.x = float(1.0) / u_xlat24;
        u_xlat1.x = u_xlat1.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat28 = min(abs(u_xlat24), 1.0);
        u_xlat29 = max(abs(u_xlat24), 1.0);
        u_xlat29 = float(1.0) / u_xlat29;
        u_xlat28 = u_xlat28 * u_xlat29;
        u_xlat29 = u_xlat28 * u_xlat28;
        u_xlat23 = u_xlat29 * 0.0208350997 + -0.0851330012;
        u_xlat23 = u_xlat29 * u_xlat23 + 0.180141002;
        u_xlat23 = u_xlat29 * u_xlat23 + -0.330299497;
        u_xlat29 = u_xlat29 * u_xlat23 + 0.999866009;
        u_xlat23 = u_xlat28 * u_xlat29;
#ifdef UNITY_ADRENO_ES3
        u_xlatb31 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb31 = 1.0<abs(u_xlat24);
#endif
        u_xlat23 = u_xlat23 * -2.0 + 1.57079637;
        u_xlat23 = u_xlatb31 ? u_xlat23 : float(0.0);
        u_xlat28 = u_xlat28 * u_xlat29 + u_xlat23;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat28) : u_xlat28;
        u_xlat24 = u_xlat1.x * u_xlat24 + -1.0;
        u_xlat7.xy = u_xlat3.xy * vec2(u_xlat24) + u_xlat6.xy;
    //ENDIF
    }
    u_xlat7.xy = u_xlat7.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat7.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_7.xyz = textureLod(_MainTex, u_xlat3.xy, 0.0).xyz;
    u_xlat24 = dot(u_xlat3.zw, u_xlat3.zw);
    u_xlat24 = sqrt(u_xlat24);
    if(u_xlatb9){
        u_xlat1.xy = vec2(u_xlat24) * _Distortion_Amount.xy;
        u_xlat3.x = cos(u_xlat1.x);
        u_xlat1.x = sin(u_xlat1.x);
        u_xlat1.x = u_xlat1.x / u_xlat3.x;
        u_xlat9 = float(1.0) / u_xlat1.y;
        u_xlat1.x = u_xlat1.x * u_xlat9 + -1.0;
        u_xlat1.xy = u_xlat3.zw * u_xlat1.xx + u_xlat6.zw;
    } else {
        u_xlat3.x = float(1.0) / u_xlat24;
        u_xlat3.x = u_xlat3.x * _Distortion_Amount.x;
        u_xlat24 = u_xlat24 * _Distortion_Amount.y;
        u_xlat11 = min(abs(u_xlat24), 1.0);
        u_xlat28 = max(abs(u_xlat24), 1.0);
        u_xlat28 = float(1.0) / u_xlat28;
        u_xlat11 = u_xlat11 * u_xlat28;
        u_xlat28 = u_xlat11 * u_xlat11;
        u_xlat29 = u_xlat28 * 0.0208350997 + -0.0851330012;
        u_xlat29 = u_xlat28 * u_xlat29 + 0.180141002;
        u_xlat29 = u_xlat28 * u_xlat29 + -0.330299497;
        u_xlat28 = u_xlat28 * u_xlat29 + 0.999866009;
        u_xlat29 = u_xlat11 * u_xlat28;
#ifdef UNITY_ADRENO_ES3
        u_xlatb6 = !!(1.0<abs(u_xlat24));
#else
        u_xlatb6 = 1.0<abs(u_xlat24);
#endif
        u_xlat29 = u_xlat29 * -2.0 + 1.57079637;
        u_xlat29 = u_xlatb6 ? u_xlat29 : float(0.0);
        u_xlat11 = u_xlat11 * u_xlat28 + u_xlat29;
        u_xlat24 = min(u_xlat24, 1.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb24 = !!(u_xlat24<(-u_xlat24));
#else
        u_xlatb24 = u_xlat24<(-u_xlat24);
#endif
        u_xlat24 = (u_xlatb24) ? (-u_xlat11) : u_xlat11;
        u_xlat24 = u_xlat3.x * u_xlat24 + -1.0;
        u_xlat1.xy = u_xlat3.zw * vec2(u_xlat24) + u_xlat6.zw;
    //ENDIF
    }
    u_xlat1.xy = u_xlat1.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat1.xy * vec2(_RenderViewportScaleFactor);
    u_xlat16_3.xyz = textureLod(_MainTex, u_xlat1.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat16_4.xyz * u_xlat16_7.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_10.xyz + u_xlat16_6.xyz;
    u_xlat16_0.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_0.xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_10.xyz = u_xlat16_5.xyz + u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz / u_xlat16_10.xyz;
    u_xlat16_0.xyz = u_xlat16_0.xyz * u_xlat16_0.xyz;
    u_xlat3 = _BloomTex_TexelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);
    u_xlat24 = _Bloom_Settings.x * 0.5;
    u_xlat4 = u_xlat3.xyzy * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4 = min(max(u_xlat4, 0.0), 1.0);
#else
    u_xlat4 = clamp(u_xlat4, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat4 * vec4(_RenderViewportScaleFactor);
    u_xlat16_10.xyz = texture(_BloomTex, u_xlat4.xy).xyz;
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat4.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat3 = u_xlat3.xwzw * vec4(u_xlat24) + u_xlat17.xyxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat3 = min(max(u_xlat3, 0.0), 1.0);
#else
    u_xlat3 = clamp(u_xlat3, 0.0, 1.0);
#endif
    u_xlat3 = u_xlat3 * vec4(_RenderViewportScaleFactor);
    u_xlat16_4.xyz = texture(_BloomTex, u_xlat3.xy).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_4.xyz;
    u_xlat16_3.xyz = texture(_BloomTex, u_xlat3.zw).xyz;
    u_xlat16_10.xyz = u_xlat16_10.xyz + u_xlat16_3.xyz;
    u_xlat10.xyz = u_xlat16_10.xyz * _Bloom_Settings.yyy;
    u_xlat1.xy = u_xlat17.xy * _Bloom_DirtTileOffset.xy + _Bloom_DirtTileOffset.zw;
    u_xlat16_3.xyz = texture(_Bloom_DirtTex, u_xlat1.xy).xyz;
    u_xlat10.xyz = u_xlat10.xyz * vec3(0.25, 0.25, 0.25);
    u_xlat3.xyz = u_xlat16_3.xyz * _Bloom_Settings.zzz;
    u_xlat4.xyz = u_xlat10.xyz * _Bloom_Color.xyz;
    u_xlat0.xyz = u_xlat16_0.xyz * u_xlat16_2.xxx + u_xlat4.xyz;
    u_xlat0.xyz = u_xlat3.xyz * u_xlat10.xyz + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(_Vignette_Mode<0.5);
#else
    u_xlatb24 = _Vignette_Mode<0.5;
#endif
    if(u_xlatb24){
        u_xlat1.xy = u_xlat17.xy + (-_Vignette_Center.xy);
        u_xlat2.yz = abs(u_xlat1.yx) * _Vignette_Settings.xx;
        u_xlat24 = _ScreenParams.x / _ScreenParams.y;
        u_xlat24 = u_xlat24 + -1.0;
        u_xlat24 = _Vignette_Settings.w * u_xlat24 + 1.0;
        u_xlat2.x = u_xlat24 * u_xlat2.z;
        u_xlat2.xy = u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
        u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
        u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
        u_xlat1.xy = log2(u_xlat2.xy);
        u_xlat1.xy = u_xlat1.xy * _Vignette_Settings.zz;
        u_xlat1.xy = exp2(u_xlat1.xy);
        u_xlat24 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat24 = (-u_xlat24) + 1.0;
        u_xlat24 = max(u_xlat24, 0.0);
        u_xlat24 = log2(u_xlat24);
        u_xlat24 = u_xlat24 * _Vignette_Settings.y;
        u_xlat24 = exp2(u_xlat24);
        u_xlat2.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz + _Vignette_Color.xyz;
        u_xlat2.xyz = u_xlat0.xyz * u_xlat2.xyz;
    } else {
        u_xlat16_24 = texture(_Vignette_Mask, u_xlat17.xy).w;
        u_xlat1.xyz = (-_Vignette_Color.xyz) + vec3(1.0, 1.0, 1.0);
        u_xlat1.xyz = vec3(u_xlat16_24) * u_xlat1.xyz + _Vignette_Color.xyz;
        u_xlat1.xyz = u_xlat0.xyz * u_xlat1.xyz + (-u_xlat0.xyz);
        u_xlat2.xyz = vec3(_Vignette_Opacity) * u_xlat1.xyz + u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD1.xy * _Grain_Params2.xy + _Grain_Params2.zw;
    u_xlat16_0.xyz = texture(_GrainTex, u_xlat0.xy).xyz;
    u_xlat1.xyz = u_xlat2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xyz = min(max(u_xlat1.xyz, 0.0), 1.0);
#else
    u_xlat1.xyz = clamp(u_xlat1.xyz, 0.0, 1.0);
#endif
    u_xlat24 = dot(u_xlat1.xyz, vec3(0.212672904, 0.715152204, 0.0721750036));
    u_xlat24 = sqrt(u_xlat24);
    u_xlat24 = _Grain_Params1.xxxy.z * (-u_xlat24) + 1.0;
    u_xlat0.xyz = u_xlat16_0.zxy * u_xlat2.zxy;
    u_xlat0.xyz = u_xlat0.xyz * vec3(_Grain_Params1.y, _Grain_Params1.y, _Grain_Params1.y);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat24) + u_xlat2.zxy;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.xyz = min(max(u_xlat0.xyz, 0.0), 1.0);
#else
    u_xlat0.xyz = clamp(u_xlat0.xyz, 0.0, 1.0);
#endif
    u_xlat0.xyz = sqrt(u_xlat0.xyz);
    u_xlat8.xyz = u_xlat0.xyz * _Lut2D_Params.zzz;
    u_xlat8.x = floor(u_xlat8.x);
    u_xlat1.xy = _Lut2D_Params.xy * vec2(0.5, 0.5);
    u_xlat1.yz = u_xlat8.yz * _Lut2D_Params.xy + u_xlat1.xy;
    u_xlat1.x = u_xlat8.x * _Lut2D_Params.y + u_xlat1.y;
    u_xlat16_2.xyz = texture(_Lut2D, u_xlat1.xz).xyz;
    u_xlat3.x = _Lut2D_Params.y;
    u_xlat3.y = 0.0;
    u_xlat16.xy = u_xlat1.xz + u_xlat3.xy;
    u_xlat16_1.xyz = texture(_Lut2D, u_xlat16.xy).xyz;
    u_xlat0.x = u_xlat0.x * _Lut2D_Params.z + (-u_xlat8.x);
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) + u_xlat16_1.xyz;
    u_xlat0.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_2.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _Dithering_Coords.xy + _Dithering_Coords.zw;
    u_xlat16_24 = texture(_DitheringTex, u_xlat1.xy).w;
    u_xlat16_24 = u_xlat16_24 * 2.0 + -1.0;
    u_xlat16_1.x = u_xlat16_24 * 3.40282347e+38 + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_1.x = u_xlat16_1.x * 2.0 + -1.0;
    u_xlat16_24 = -abs(u_xlat16_24) + 1.0;
    u_xlat16_24 = sqrt(u_xlat16_24);
    u_xlat16_24 = (-u_xlat16_24) + 1.0;
    u_xlat16_24 = u_xlat16_24 * u_xlat16_1.x;
    SV_Target0.xyz = vec3(u_xlat16_24) * vec3(0.00392156886, 0.00392156886, 0.00392156886) + abs(u_xlat0.xyz);
    SV_Target0.w = 1.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 hw_tier00 " {
""
}
SubProgram "gles3 hw_tier01 " {
""
}
SubProgram "gles3 hw_tier02 " {
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" }
""
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DISTORT" "CHROMATIC_ABERRATION_LOW" "BLOOM_LOW" "VIGNETTE" "GRAIN" "FINALPASS" "COLOR_GRADING_LDR_2D" }
""
}
}
}
}
}